// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createNewUserSession = `-- name: CreateNewUserSession :one
INSERT INTO user_sessions (user_email, expires_at) VALUES (?, ?)
    ON CONFLICT (user_email) DO UPDATE SET expires_at=excluded.expires_at
    RETURNING id
`

type CreateNewUserSessionParams struct {
	UserEmail string
	ExpiresAt time.Time
}

func (q *Queries) CreateNewUserSession(ctx context.Context, arg CreateNewUserSessionParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createNewUserSession, arg.UserEmail, arg.ExpiresAt)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (user_id, user_email, expires_at) VALUES (?, ?, ?)
    ON CONFLICT (user_email, user_id) DO UPDATE SET expires_at=excluded.expires_at
    RETURNING id
`

type CreateUserSessionParams struct {
	UserID    sql.NullInt64
	UserEmail string
	ExpiresAt time.Time
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUserSession, arg.UserID, arg.UserEmail, arg.ExpiresAt)
	var id string
	err := row.Scan(&id)
	return id, err
}
