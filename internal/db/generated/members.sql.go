// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: members.sql

package generated

import (
	"context"
)

const deleteGroupMember = `-- name: DeleteGroupMember :exec
DELETE FROM group_members
    WHERE group_id=? AND user_id=?
`

type DeleteGroupMemberParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) DeleteGroupMember(ctx context.Context, arg DeleteGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMember, arg.GroupID, arg.UserID)
	return err
}

const getGroupMember = `-- name: GetGroupMember :one
SELECT group_id, user_id, state AS member_state, role AS member_role FROM group_members
    WHERE group_id=? AND user_id=?
    LIMIT 1
`

type GetGroupMemberParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

type GetGroupMemberRow struct {
	GroupID     int64  `json:"group_id"`
	UserID      int64  `json:"user_id"`
	MemberState string `json:"member_state"`
	MemberRole  string `json:"member_role"`
}

func (q *Queries) GetGroupMember(ctx context.Context, arg GetGroupMemberParams) (GetGroupMemberRow, error) {
	row := q.db.QueryRowContext(ctx, getGroupMember, arg.GroupID, arg.UserID)
	var i GetGroupMemberRow
	err := row.Scan(
		&i.GroupID,
		&i.UserID,
		&i.MemberState,
		&i.MemberRole,
	)
	return i, err
}

const upsertGroupMember = `-- name: UpsertGroupMember :exec
INSERT INTO group_members (group_id, user_id, state, role) VALUES (?, ?, ?, ?)
    ON CONFLICT (group_id, user_id)
        DO UPDATE 
            SET 
                state=excluded.state,
                role=excluded.role,
                updated_at=CURRENT_TIMESTAMP
`

type UpsertGroupMemberParams struct {
	GroupID int64  `json:"group_id"`
	UserID  int64  `json:"user_id"`
	State   string `json:"state"`
	Role    string `json:"role"`
}

func (q *Queries) UpsertGroupMember(ctx context.Context, arg UpsertGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, upsertGroupMember,
		arg.GroupID,
		arg.UserID,
		arg.State,
		arg.Role,
	)
	return err
}
