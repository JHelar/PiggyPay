// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: expenses.sql

package generated

import (
	"context"
)

const addExpense = `-- name: AddExpense :one
INSERT INTO group_expenses (name, cost, group_id, user_id) 
    VALUES (?, ?, ?, ?)
    RETURNING 
        id, 
        name, 
        cost,
        (
            SELECT users.first_name
            FROM users
            WHERE users.id = group_expenses.user_id
        ) AS first_name,
        (
            SELECT users.last_name
            FROM users
            WHERE users.id = group_expenses.user_id
        ) AS last_name
`

type AddExpenseParams struct {
	Name    string  `json:"name"`
	Cost    float64 `json:"cost"`
	GroupID int64   `json:"group_id"`
	UserID  int64   `json:"user_id"`
}

type AddExpenseRow struct {
	ID        int64   `json:"id"`
	Name      string  `json:"name"`
	Cost      float64 `json:"cost"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
}

func (q *Queries) AddExpense(ctx context.Context, arg AddExpenseParams) (AddExpenseRow, error) {
	row := q.db.QueryRowContext(ctx, addExpense,
		arg.Name,
		arg.Cost,
		arg.GroupID,
		arg.UserID,
	)
	var i AddExpenseRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getExpenseById = `-- name: GetExpenseById :one
SELECT id, name, cost FROM group_expenses
    WHERE group_expenses.id=? AND group_expenses.group_id=?
    AND EXISTS (
        SELECT 1
        FROM group_members group_members_check
        WHERE group_members_check.group_id=group_expenses.group_id
        AND group_members_check.user_id=?
    )
`

type GetExpenseByIdParams struct {
	ID      int64 `json:"id"`
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

type GetExpenseByIdRow struct {
	ID   int64   `json:"id"`
	Name string  `json:"name"`
	Cost float64 `json:"cost"`
}

func (q *Queries) GetExpenseById(ctx context.Context, arg GetExpenseByIdParams) (GetExpenseByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getExpenseById, arg.ID, arg.GroupID, arg.UserID)
	var i GetExpenseByIdRow
	err := row.Scan(&i.ID, &i.Name, &i.Cost)
	return i, err
}

const getGroupExpenses = `-- name: GetGroupExpenses :many
SELECT 
    group_expenses.id AS id,
    group_expenses.name AS name,
    group_expenses.cost as cost,
    users.first_name AS first_name,
    users.last_name AS last_name
    FROM group_expenses
        INNER JOIN users
            ON users.id=group_expenses.user_id
    WHERE group_expenses.group_id=?
    AND EXISTS (
        SELECT 1
        FROM group_members group_members_check
        WHERE group_members_check.group_id=group_expenses.group_id
        AND group_members_check.user_id=?
    )
`

type GetGroupExpensesParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

type GetGroupExpensesRow struct {
	ID        int64   `json:"id"`
	Name      string  `json:"name"`
	Cost      float64 `json:"cost"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
}

func (q *Queries) GetGroupExpenses(ctx context.Context, arg GetGroupExpensesParams) ([]GetGroupExpensesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupExpenses, arg.GroupID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupExpensesRow{}
	for rows.Next() {
		var i GetGroupExpensesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeExpense = `-- name: RemoveExpense :exec
DELETE FROM group_expenses
    WHERE group_expenses.id=? AND group_expenses.group_id=?
    AND EXISTS (
        SELECT 1
        FROM group_members group_members_check
        WHERE group_members_check.group_id=group_expenses.group_id
        AND group_members_check.user_id=?
    )
`

type RemoveExpenseParams struct {
	ID      int64 `json:"id"`
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) RemoveExpense(ctx context.Context, arg RemoveExpenseParams) error {
	_, err := q.db.ExecContext(ctx, removeExpense, arg.ID, arg.GroupID, arg.UserID)
	return err
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE group_expenses
    SET
        cost=?,
        name=?,
        updated_at=CURRENT_TIMESTAMP
    WHERE group_expenses.id=? AND group_expenses.group_id=?
    AND EXISTS (
        SELECT 1
        FROM group_members group_members_check
        WHERE group_members_check.group_id=group_expenses.group_id
        AND group_members_check.user_id=?
    )
    RETURNING id, name, cost
`

type UpdateExpenseParams struct {
	Cost    float64 `json:"cost"`
	Name    string  `json:"name"`
	ID      int64   `json:"id"`
	GroupID int64   `json:"group_id"`
	UserID  int64   `json:"user_id"`
}

type UpdateExpenseRow struct {
	ID   int64   `json:"id"`
	Name string  `json:"name"`
	Cost float64 `json:"cost"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (UpdateExpenseRow, error) {
	row := q.db.QueryRowContext(ctx, updateExpense,
		arg.Cost,
		arg.Name,
		arg.ID,
		arg.GroupID,
		arg.UserID,
	)
	var i UpdateExpenseRow
	err := row.Scan(&i.ID, &i.Name, &i.Cost)
	return i, err
}
